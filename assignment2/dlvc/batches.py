
from .dataset import Dataset
from .ops import Op

import typing
import math
import random
import numpy as np

class Batch:
    '''
    A (mini)batch generated by the batch generator.
    '''

    def __init__(self, data, label, idx):
        '''
        Ctor.
        '''

        self.data = data
        self.label = label
        self.idx = idx

class BatchGenerator:
    '''
    Batch generator.
    Returned batches have the following properties:
      data: numpy array holding batch data of shape (s, SHAPE_OF_DATASET_SAMPLES).
      label: numpy array holding batch labels of shape (s, SHAPE_OF_DATASET_LABELS).
      idx: numpy array with shape (s,) encoding the indices of each sample in the original dataset.
    '''

    def __init__(self, dataset: Dataset, num: int, shuffle: bool, op: Op=None):
        '''
        Ctor.
        Dataset is the dataset to iterate over.
        num is the number of samples per batch. the number in the last batch might be smaller than that.
        shuffle controls whether the sample order should be preserved or not.
        op is an operation to apply to input samples.
        Raises TypeError on invalid argument types.
        Raises ValueError on invalid argument values, such as if num is > len(dataset).
        '''
        self.dataset = dataset
        self.op = op

        self.batch_size = num
        self.iteration_count = 0

        self.indices = np.arange(dataset.__len__())
        if shuffle:
            random.shuffle(self.indices)

    def __len__(self) -> int:
        '''
        Returns the number of batches generated per iteration.
        '''
        
        return math.ceil(len(self.dataset.labels) / self.batch_size)

    def __generate_next_batch__(self):
        start = self.iteration_count * self.batch_size
        end = start + self.batch_size

        idx = self.indices[start:end]

        data=[]
        label=[]
        for i in idx:
            item = self.dataset.__getitem__(i)
            transformed_data=self.op(item.data)
            data.append(transformed_data)
            label.append(item.label)
        return Batch(np.array(data),np.array(label),idx)


    def __iter__(self) -> typing.Iterable[Batch]:
        '''
        Iterate over the wrapped dataset, returning the data as batches.
        '''

        while self.iteration_count < self.__len__():
            yield self.__generate_next_batch__()
            self.iteration_count += 1
        
        self.iteration_count = 0
